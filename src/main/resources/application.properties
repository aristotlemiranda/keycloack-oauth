spring.application.name=OAuth Client Sample

### server port
server.port=8081

#client registration configuration
spring.security.oauth2.client.registration.keycloak.client-id=springboot-openid-client-app
spring.security.oauth2.client.registration.keycloak.client-secret=0IezYl1fYSX3XuyW4ZlayA9KqisItfQ0
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

#OIDC provider configuration:
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://twtamm-razeradv:8080/realms/Keycloak_springboot
spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/login/oauth2/code/springboot-openid-client-app
#spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/customers

spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

#validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://twtamm-razeradv:8080/auth/realms/Keycloak_springboot

#session timeout
server.servlet.session.timeout=30m

#For Testing
app.auth.username= my-user
app.auth.password=P@ssw0rd
app.auth.grant_type=password

#H2 database configuration
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.datasource.platform=h2